{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2Address",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc87cbdba71a5115e36a0012b69a3ff61c24b249d39a9685e29298aaec576c118",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1249498",
    "logsBloom": "0x
    "blockHash": "0xc66e88d42b63ccc08a32208209f10bdf347547ded61d48169d61987f40a70540",
    "transactionHash": "0xc87cbdba71a5115e36a0012b69a3ff61c24b249d39a9685e29298aaec576c118",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1249498",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "3",
    "500000",
    "10000000000000000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "442bc934870b347ac947dee6ba642292",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\n\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__TransferFailed();\\nerror Raffle__UpkeepNotNeeded(\\n   uint256 currentBalance,\\n   uint256 numPlayers,\\n   uint256 raffleState\\n);\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatible {\\n   enum RaffleState {\\n      OPEN,\\n      CALCULATING\\n   }\\n\\n   VRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\\n   bytes32 private immutable i_gasLane;\\n   uint64 private immutable i_subscriptionId;\\n   uint16 private immutable i_requestConfirmations;\\n   uint32 private immutable i_callbackGasLimit;\\n   uint32 private constant NUM_WORDS = 1;\\n\\n   address payable[] private s_players;\\n   address private s_recentWinner;\\n   uint256 private s_lastTimeStamp;\\n   RaffleState private s_raffleState;\\n   uint256 private immutable i_entranceFee;\\n   uint256 private immutable i_interval;\\n\\n   event RaffleEnter(address indexed player);\\n   event RequestRaffleWinner(uint256 indexed requestId);\\n   event WinnerPicked(address indexed winner);\\n\\n   constructor(\\n      address vrfCoordinatorV2Address,\\n      uint64 subscriptionId,\\n      bytes32 gasLane,\\n      uint16 requestConfirmations,\\n      uint32 callbackGasLimit,\\n      uint256 entranceFee,\\n      uint256 interval\\n   ) VRFConsumerBaseV2(vrfCoordinatorV2Address) {\\n      i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2Address);\\n      i_subscriptionId = subscriptionId;\\n      i_gasLane = gasLane;\\n      i_requestConfirmations = requestConfirmations;\\n      i_callbackGasLimit = callbackGasLimit;\\n      i_entranceFee = entranceFee;\\n      i_interval = interval;\\n      s_lastTimeStamp = block.timestamp;\\n   }\\n\\n   function enterRaffle() public payable {\\n      if (msg.value < i_entranceFee) {\\n         revert Raffle__SendMoreToEnterRaffle();\\n      }\\n      if (s_raffleState != RaffleState.OPEN) {\\n         revert Raffle__RaffleNotOpen();\\n      }\\n\\n      s_players.push(payable(msg.sender));\\n      emit RaffleEnter(msg.sender);\\n   }\\n\\n   function checkUpkeep(\\n      bytes memory\\n   ) public view override returns (bool upkeepNeeded, bytes memory) {\\n      bool isOpen = s_raffleState == RaffleState.OPEN;\\n      bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n      bool hasPlayers = s_players.length > 0;\\n      bool hasBalance = address(this).balance > 0;\\n      upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n      return (upkeepNeeded, '0x0');\\n   }\\n\\n   function performUpkeep(bytes calldata) external override {\\n      (bool upkeepNeeded, ) = checkUpkeep('');\\n\\n      if (!upkeepNeeded) {\\n         revert Raffle__UpkeepNotNeeded(\\n            address(this).balance,\\n            s_players.length,\\n            uint256(s_raffleState)\\n         );\\n      }\\n\\n      s_raffleState = RaffleState.CALCULATING;\\n\\n      uint256 requestId = i_vrfCoordinatorV2.requestRandomWords(\\n         i_gasLane,\\n         i_subscriptionId,\\n         i_requestConfirmations,\\n         i_callbackGasLimit,\\n         NUM_WORDS\\n      );\\n\\n      emit RequestRaffleWinner(requestId);\\n   }\\n\\n   function fulfillRandomWords(\\n      uint256,\\n      uint256[] memory randomWords\\n   ) internal override {\\n      address payable[] memory players = s_players;\\n      uint256 winnerIndex = randomWords[0] % players.length;\\n      address payable winner = players[winnerIndex];\\n      s_recentWinner = winner;\\n      s_players = new address payable[](0);\\n      s_lastTimeStamp = block.timestamp;\\n      s_raffleState = RaffleState.OPEN;\\n\\n      (bool success, ) = winner.call{value: address(this).balance}('');\\n      if (!success) {\\n         revert Raffle__TransferFailed();\\n      }\\n\\n      emit WinnerPicked(winner);\\n   }\\n\\n   function getRaffleState() public view returns (RaffleState) {\\n      return s_raffleState;\\n   }\\n\\n   function getRequestConfirmations() public view returns (uint256) {\\n      return i_requestConfirmations;\\n   }\\n\\n   function getRecentWinner() public view returns (address) {\\n      return s_recentWinner;\\n   }\\n\\n   function getPlayer(uint256 index) public view returns (address) {\\n      return s_players[index];\\n   }\\n\\n   function getLastTimeStamp() public view returns (uint256) {\\n      return s_lastTimeStamp;\\n   }\\n\\n   function getInterval() public view returns (uint256) {\\n      return i_interval;\\n   }\\n\\n   function getEntranceFee() public view returns (uint256) {\\n      return i_entranceFee;\\n   }\\n\\n   function getNumberOfPlayers() public view returns (uint256) {\\n      return s_players.length;\\n   }\\n\\n   function getNumWords() public pure returns (uint256) {\\n      return NUM_WORDS;\\n   }\\n}\\n\",\"keccak256\":\"0x9cf7face62f6d850f5a2dd1e11285ac78b67f4ed36fa9af627c079aad1e518da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620018fd380380620018fd8339818101604052810190620000389190620002b7565b868073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508673ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508567ffffffffffffffff1660e08167ffffffffffffffff16815250508460c081815250508361ffff166101008161ffff16815250508263ffffffff166101208163ffffffff168152505081610140818152505080610160818152505042600281905550505050505050506200036a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001448262000117565b9050919050565b620001568162000137565b81146200016257600080fd5b50565b60008151905062000176816200014b565b92915050565b600067ffffffffffffffff82169050919050565b6200019b816200017c565b8114620001a757600080fd5b50565b600081519050620001bb8162000190565b92915050565b6000819050919050565b620001d681620001c1565b8114620001e257600080fd5b50565b600081519050620001f681620001cb565b92915050565b600061ffff82169050919050565b6200021581620001fc565b81146200022157600080fd5b50565b60008151905062000235816200020a565b92915050565b600063ffffffff82169050919050565b62000256816200023b565b81146200026257600080fd5b50565b60008151905062000276816200024b565b92915050565b6000819050919050565b62000291816200027c565b81146200029d57600080fd5b50565b600081519050620002b18162000286565b92915050565b600080600080600080600060e0888a031215620002d957620002d862000112565b5b6000620002e98a828b0162000165565b9750506020620002fc8a828b01620001aa565b96505060406200030f8a828b01620001e5565b9550506060620003228a828b0162000224565b9450506080620003358a828b0162000265565b93505060a0620003488a828b01620002a0565b92505060c06200035b8a828b01620002a0565b91505092959891949750929550565b60805160a05160c05160e05161010051610120516101405161016051611511620003ec6000396000818161081b01526108c40152600081816102fa01526103f7015260006106bb01526000818161069a01526107b101526000610679015260006106580152600061061c015260008181610337015261038b01526115116000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c9b565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d2d565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610ee1565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f98565b610564565b005b34801561018557600080fd5b5061018e610774565b60405161019b9190611026565b60405180910390f35b3480156101b057600080fd5b506101b961079e565b6040516101c69190610c9b565b60405180910390f35b3480156101db57600080fd5b506101e46107ad565b6040516101f19190610c9b565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c91906110f6565b6107d9565b60405161022f9291906111d9565b60405180910390f35b34801561024457600080fd5b5061024d6108c0565b60405161025a9190610c9b565b60405180910390f35b34801561026f57600080fd5b506102786108e8565b6040516102859190610c9b565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611209565b6108f2565b6040516102c29190611026565b60405180910390f35b3480156102d757600080fd5b506102e0610939565b6040516102ed9190610c9b565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611236565b60405180910390fd5b6103f18282610945565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610cb6565b5b600360009054906101000a900460ff16600181111561048557610484610cb6565b5b146104bc576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107d9565b509050806105ed5747600080549050600360009054906101000a900460ff1660018111156105af576105ae610cb6565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061125f565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561061357610612610cb6565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106fc95949392919061130e565b6020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190611376565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff16905090565b6000606060008060018111156107f2576107f1610cb6565b5b600360009054906101000a900460ff16600181111561081457610813610cb6565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261084891906113d2565b119050600080600080549050119050600080471190508380156108685750825b80156108715750815b801561087a5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600080828154811061090757610906611406565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054806020026020016040519081016040528092919081815260200182805480156109c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161097e575b5050505050905060008151836000815181106109e7576109e6611406565b5b60200260200101516109f99190611464565b90506000828281518110610a1057610a0f611406565b5b6020026020010151905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a7657610a75610d9e565b5b604051908082528060200260200182016040528015610aa45781602001602082028036833780820191505090505b5060009080519060200190610aba929190610bdb565b50426002819055506000600360006101000a81548160ff02191690836001811115610ae857610ae7610cb6565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b13906114c6565b60006040518083038185875af1925050503d8060008114610b50576040519150601f19603f3d011682016040523d82523d6000602084013e610b55565b606091505b5050905080610b90576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2505050505050565b828054828255906000526020600020908101928215610c54579160200282015b82811115610c535782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bfb565b5b509050610c619190610c65565b5090565b5b80821115610c7e576000816000905550600101610c66565b5090565b6000819050919050565b610c9581610c82565b82525050565b6000602082019050610cb06000830184610c8c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cf657610cf5610cb6565b5b50565b6000819050610d0782610ce5565b919050565b6000610d1782610cf9565b9050919050565b610d2781610d0c565b82525050565b6000602082019050610d426000830184610d1e565b92915050565b6000604051905090565b600080fd5b600080fd5b610d6581610c82565b8114610d7057600080fd5b50565b600081359050610d8281610d5c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dd682610d8d565b810181811067ffffffffffffffff82111715610df557610df4610d9e565b5b80604052505050565b6000610e08610d48565b9050610e148282610dcd565b919050565b600067ffffffffffffffff821115610e3457610e33610d9e565b5b602082029050602081019050919050565b600080fd5b6000610e5d610e5884610e19565b610dfe565b90508083825260208201905060208402830185811115610e8057610e7f610e45565b5b835b81811015610ea95780610e958882610d73565b845260208401935050602081019050610e82565b5050509392505050565b600082601f830112610ec857610ec7610d88565b5b8135610ed8848260208601610e4a565b91505092915050565b60008060408385031215610ef857610ef7610d52565b5b6000610f0685828601610d73565b925050602083013567ffffffffffffffff811115610f2757610f26610d57565b5b610f3385828601610eb3565b9150509250929050565b600080fd5b60008083601f840112610f5857610f57610d88565b5b8235905067ffffffffffffffff811115610f7557610f74610f3d565b5b602083019150836001820283011115610f9157610f90610e45565b5b9250929050565b60008060208385031215610faf57610fae610d52565b5b600083013567ffffffffffffffff811115610fcd57610fcc610d57565b5b610fd985828601610f42565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101082610fe5565b9050919050565b61102081611005565b82525050565b600060208201905061103b6000830184611017565b92915050565b600080fd5b600067ffffffffffffffff82111561106157611060610d9e565b5b61106a82610d8d565b9050602081019050919050565b82818337600083830152505050565b600061109961109484611046565b610dfe565b9050828152602081018484840111156110b5576110b4611041565b5b6110c0848285611077565b509392505050565b600082601f8301126110dd576110dc610d88565b5b81356110ed848260208601611086565b91505092915050565b60006020828403121561110c5761110b610d52565b5b600082013567ffffffffffffffff81111561112a57611129610d57565b5b611136848285016110c8565b91505092915050565b60008115159050919050565b6111548161113f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611194578082015181840152602081019050611179565b60008484015250505050565b60006111ab8261115a565b6111b58185611165565b93506111c5818560208601611176565b6111ce81610d8d565b840191505092915050565b60006040820190506111ee600083018561114b565b818103602083015261120081846111a0565b90509392505050565b60006020828403121561121f5761121e610d52565b5b600061122d84828501610d73565b91505092915050565b600060408201905061124b6000830185611017565b6112586020830184611017565b9392505050565b60006060820190506112746000830186610c8c565b6112816020830185610c8c565b61128e6040830184610c8c565b949350505050565b6000819050919050565b6112a981611296565b82525050565b600067ffffffffffffffff82169050919050565b6112cc816112af565b82525050565b600061ffff82169050919050565b6112e9816112d2565b82525050565b600063ffffffff82169050919050565b611308816112ef565b82525050565b600060a08201905061132360008301886112a0565b61133060208301876112c3565b61133d60408301866112e0565b61134a60608301856112ff565b61135760808301846112ff565b9695505050505050565b60008151905061137081610d5c565b92915050565b60006020828403121561138c5761138b610d52565b5b600061139a84828501611361565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113dd82610c82565b91506113e883610c82565b9250828203905081811115611400576113ff6113a3565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061146f82610c82565b915061147a83610c82565b92508261148a57611489611435565b5b828206905092915050565b600081905092915050565b50565b60006114b0600083611495565b91506114bb826114a0565b600082019050919050565b60006114d1826114a3565b915081905091905056fea26469706673582212201607170a01b9526f35494db6e0a3169ad88285e58ebbae899bc6238f5eefdc3d64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c9b565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610d2d565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610ee1565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f98565b610564565b005b34801561018557600080fd5b5061018e610774565b60405161019b9190611026565b60405180910390f35b3480156101b057600080fd5b506101b961079e565b6040516101c69190610c9b565b60405180910390f35b3480156101db57600080fd5b506101e46107ad565b6040516101f19190610c9b565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c91906110f6565b6107d9565b60405161022f9291906111d9565b60405180910390f35b34801561024457600080fd5b5061024d6108c0565b60405161025a9190610c9b565b60405180910390f35b34801561026f57600080fd5b506102786108e8565b6040516102859190610c9b565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611209565b6108f2565b6040516102c29190611026565b60405180910390f35b3480156102d757600080fd5b506102e0610939565b6040516102ed9190610c9b565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611236565b60405180910390fd5b6103f18282610945565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610cb6565b5b600360009054906101000a900460ff16600181111561048557610484610cb6565b5b146104bc576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107d9565b509050806105ed5747600080549050600360009054906101000a900460ff1660018111156105af576105ae610cb6565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e49392919061125f565b60405180910390fd5b6001600360006101000a81548160ff0219169083600181111561061357610612610cb6565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106fc95949392919061130e565b6020604051808303816000875af115801561071b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073f9190611376565b9050807fde6349b018d6c03d837b67d9a198a6ba4842546f2295fe963fae141e5dbaef8160405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff16905090565b6000606060008060018111156107f2576107f1610cb6565b5b600360009054906101000a900460ff16600181111561081457610813610cb6565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261084891906113d2565b119050600080600080549050119050600080471190508380156108685750825b80156108715750815b801561087a5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600080828154811061090757610906611406565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054806020026020016040519081016040528092919081815260200182805480156109c857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161097e575b5050505050905060008151836000815181106109e7576109e6611406565b5b60200260200101516109f99190611464565b90506000828281518110610a1057610a0f611406565b5b6020026020010151905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a7657610a75610d9e565b5b604051908082528060200260200182016040528015610aa45781602001602082028036833780820191505090505b5060009080519060200190610aba929190610bdb565b50426002819055506000600360006101000a81548160ff02191690836001811115610ae857610ae7610cb6565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610b13906114c6565b60006040518083038185875af1925050503d8060008114610b50576040519150601f19603f3d011682016040523d82523d6000602084013e610b55565b606091505b5050905080610b90576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2505050505050565b828054828255906000526020600020908101928215610c54579160200282015b82811115610c535782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bfb565b5b509050610c619190610c65565b5090565b5b80821115610c7e576000816000905550600101610c66565b5090565b6000819050919050565b610c9581610c82565b82525050565b6000602082019050610cb06000830184610c8c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610cf657610cf5610cb6565b5b50565b6000819050610d0782610ce5565b919050565b6000610d1782610cf9565b9050919050565b610d2781610d0c565b82525050565b6000602082019050610d426000830184610d1e565b92915050565b6000604051905090565b600080fd5b600080fd5b610d6581610c82565b8114610d7057600080fd5b50565b600081359050610d8281610d5c565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dd682610d8d565b810181811067ffffffffffffffff82111715610df557610df4610d9e565b5b80604052505050565b6000610e08610d48565b9050610e148282610dcd565b919050565b600067ffffffffffffffff821115610e3457610e33610d9e565b5b602082029050602081019050919050565b600080fd5b6000610e5d610e5884610e19565b610dfe565b90508083825260208201905060208402830185811115610e8057610e7f610e45565b5b835b81811015610ea95780610e958882610d73565b845260208401935050602081019050610e82565b5050509392505050565b600082601f830112610ec857610ec7610d88565b5b8135610ed8848260208601610e4a565b91505092915050565b60008060408385031215610ef857610ef7610d52565b5b6000610f0685828601610d73565b925050602083013567ffffffffffffffff811115610f2757610f26610d57565b5b610f3385828601610eb3565b9150509250929050565b600080fd5b60008083601f840112610f5857610f57610d88565b5b8235905067ffffffffffffffff811115610f7557610f74610f3d565b5b602083019150836001820283011115610f9157610f90610e45565b5b9250929050565b60008060208385031215610faf57610fae610d52565b5b600083013567ffffffffffffffff811115610fcd57610fcc610d57565b5b610fd985828601610f42565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101082610fe5565b9050919050565b61102081611005565b82525050565b600060208201905061103b6000830184611017565b92915050565b600080fd5b600067ffffffffffffffff82111561106157611060610d9e565b5b61106a82610d8d565b9050602081019050919050565b82818337600083830152505050565b600061109961109484611046565b610dfe565b9050828152602081018484840111156110b5576110b4611041565b5b6110c0848285611077565b509392505050565b600082601f8301126110dd576110dc610d88565b5b81356110ed848260208601611086565b91505092915050565b60006020828403121561110c5761110b610d52565b5b600082013567ffffffffffffffff81111561112a57611129610d57565b5b611136848285016110c8565b91505092915050565b60008115159050919050565b6111548161113f565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611194578082015181840152602081019050611179565b60008484015250505050565b60006111ab8261115a565b6111b58185611165565b93506111c5818560208601611176565b6111ce81610d8d565b840191505092915050565b60006040820190506111ee600083018561114b565b818103602083015261120081846111a0565b90509392505050565b60006020828403121561121f5761121e610d52565b5b600061122d84828501610d73565b91505092915050565b600060408201905061124b6000830185611017565b6112586020830184611017565b9392505050565b60006060820190506112746000830186610c8c565b6112816020830185610c8c565b61128e6040830184610c8c565b949350505050565b6000819050919050565b6112a981611296565b82525050565b600067ffffffffffffffff82169050919050565b6112cc816112af565b82525050565b600061ffff82169050919050565b6112e9816112d2565b82525050565b600063ffffffff82169050919050565b611308816112ef565b82525050565b600060a08201905061132360008301886112a0565b61133060208301876112c3565b61133d60408301866112e0565b61134a60608301856112ff565b61135760808301846112ff565b9695505050505050565b60008151905061137081610d5c565b92915050565b60006020828403121561138c5761138b610d52565b5b600061139a84828501611361565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113dd82610c82565b91506113e883610c82565b9250828203905081811115611400576113ff6113a3565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061146f82610c82565b915061147a83610c82565b92508261148a57611489611435565b5b828206905092915050565b600081905092915050565b50565b60006114b0600083611495565b91506114bb826114a0565b600082019050919050565b60006114d1826114a3565b915081905091905056fea26469706673582212201607170a01b9526f35494db6e0a3169ad88285e58ebbae899bc6238f5eefdc3d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1212,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1214,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1216,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1219,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)1195"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)1195": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}